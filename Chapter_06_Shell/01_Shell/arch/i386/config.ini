# Configuration file (included from Makefile)


# Common configuration
#------------------------------------------------------------------------------
OS_NAME = "OSIER"
NAME_MAJOR := $(shell basename "`cd ..; pwd -P`")
NAME_MINOR := $(shell basename "`pwd -P`")
PROJECT := $(NAME_MINOR)

PLATFORM ?= i386
VERSION = 1.0
AUTHOR = leonardo@zemris.fer.hr

# Intermediate and output files are placed into BUILDDIR
BUILDDIR = build


# Where will system be loaded when started (for which address to prepare it)
LOAD_ADDR = 0x100000

OPTIONALS =

# Devices
#------------------------------------------------------------------------------
#"defines" (which device drivers to compile)
DEVICES = VGA_TEXT I8042 I8259 I8253 UART

#devices interface (variables implementing device_t interface)
DEVICES_DEV = dev_null vga_text_dev uart_com1 i8042_dev

#interrupt controller device
IC_DEV = i8259

#timer device
TIMER = i8253

#initial standard output device (while "booting up")
K_INITIAL_STDOUT = uart_com1
#K_INITIAL_STDOUT = vga_text_dev

#standard output for kernel function (for kprint) - device name
K_STDOUT = COM1
#K_STDOUT = VGA_TXT

#standard output and input devices for programs
U_STDIN = COM1
U_STDOUT = COM1
U_STDERR = COM1
#U_STDIN = i8042
#U_STDOUT = VGA_TXT
#U_STDERR = VGA_TXT


# System resources
#------------------------------------------------------------------------------
MAX_RESOURCES = 1000
STACK_SIZE = 0x1000
MAX_USER_DESCRIPTORS = 10


# Memory allocators to compile
#------------------------------------------------------------------------------
FIRST_FIT = 1
GMA = 2

#define which to compile
OPTIONALS += FIRST_FIT=$(FIRST_FIT) GMA=$(GMA)


# Library with utility functions (strings, lists, ...)
#------------------------------------------------------------------------------
LIBS = lib lib/mm


# Compiling and linking
#------------------------------------------------------------------------------
LINK = ld
LDSCRIPT = $(BUILDDIR)/ARCH/boot/ldscript.ld
LDFLAGS = -melf_i386
LDFLAGS_OPT = -O3 --gc-sections -s
LDFLAGS_OPTD = -O3 --gc-sections

CC = gcc

CFLAGS = -m32 -Wall -nostdinc -ffreestanding -nostdlib -fno-stack-protector

# additional optimization flags
CFLAGS_OPT = -O3 -fdata-sections -ffunction-sections

#optimization with debug information
CFLAGS_OPTD = -O3 -fdata-sections -ffunction-sections

# Linker flags
#if in command line given: debug=yes or/and optimize=yes
ifeq ($(debug),yes)
CFLAGS += -g
CMACROS += DEBUG
ifeq ($(optimize),yes) #if both are set!
CFLAGS += $(CFLAGS_OPTD)
LDFLAGS += $(LDFLAGS_OPTD)
endif
else #optimize by default
CFLAGS += $(CFLAGS_OPT)
LDFLAGS += $(LDFLAGS_OPT)
endif


# directories to include while compiling
DIRS_K := arch/$(PLATFORM)/boot arch/$(PLATFORM) arch/$(PLATFORM)/drivers \
	kernel $(LIBS)
DIRS_P := api programs/hello_world programs/timer programs/keyboard \
	programs/shell programs/segm_fault

DIRS := $(DIRS_K) $(DIRS_P)

# include dirs
INCLUDES := include $(BUILDDIR) include/api

# Memory allocators: 'GMA' or 'FIRST_FIT'
MEM_ALLOCATOR = $(FIRST_FIT)
#MEM_ALLOCATOR = $(GMA)

#initial program to be started at end of kernel initialization
START_WITH ?= shell
PROG_START_FUNC = $(START_WITH)

QEMU_MEM = 8
QEMU = qemu-system-$(PLATFORM)
QFLAGS = -m $(QEMU_MEM)M -no-kvm -serial stdio
QMSG = "Starting qemu (pop-up window)"
OPTIONALS += QEMU_MEM=$(QEMU_MEM)

DEBUG_GDB = gdb

# Power off when all programs completed?
TURN_OFF ?= 0
